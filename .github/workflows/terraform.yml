name: Terraform CI/CD

on:
  push:
    branches: [terraform-deploy]
  pull_request:
    branches: [terraform-deploy]

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    # OIDC Login
    - uses: azure/login@v1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform-version: 1.5.0

    # Initialize with backend config
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=tfstate-rg" \
          -backend-config="storage_account_name=tfstate${{ vars.UNIQUE_SUFFIX }}" \
          -backend-config="key=prod.tfstate"

    # Validation
    - name: Validate configuration
      run: terraform validate

    # Format check
    - name: Check formatting
      run: terraform fmt -check -recursive

    # Plan
    - name: Create execution plan
      run: terraform plan -out=tfplan
      if: github.event_name == 'push'

    # Apply
    - name: Apply changes
      run: terraform apply -auto-approve tfplan
      if: github.ref == 'refs/heads/terraform-deploy' && github.event_name == 'push'

    # Upload plan for PRs
    - name: Upload plan artifact
      uses: actions/upload-artifact@v4
      if: github.event_name == 'pull_request'
      with:
        name: tfplan
        path: tfplan
        retention-days: 1
