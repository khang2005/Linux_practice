name: Terraform CI/CD

on:
  push:
    branches: [terraform-deploy]
  pull_request:
    branches: [terraform-deploy]

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_environment: prod

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./terraform  # All commands run here

    steps:
    - uses: actions/checkout@v4

    - uses: azure/login@v1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - uses: hashicorp/setup-terraform@v3

    - name: Initialize
      run: |
        rm -rf .terraform*
        terraform init \
          -backend-config="resource_group_name=tfstate-rg" \
          -backend-config="storage_account_name=tfstate${{ vars.UNIQUE_SUFFIX }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=prod.tfstate"

    - name: Check Formatting
      run: |
        if [ $(terraform fmt -recursive -check | wc -l) -gt 0 ]; then
          echo "::error::Formatting issues found"
          terraform fmt -recursive -check -diff
          exit 1
        fi

    - name: Validate
      run: terraform validate

    - name: Plan
      run: terraform plan -out=tfplan -input=false
      if: github.event_name == 'push'

    - name: PR Plan
      run: terraform plan -out=tfplan -input=false
      if: github.event_name == 'pull_request'

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      if: github.event_name == 'pull_request'
      with:
        name: tfplan
        path: terraform/tfplan  # Note the path
        retention-days: 1

    - name: Apply
      run: terraform apply -auto-approve -input=false tfplan
      if: github.ref == 'refs/heads/terraform-deploy' && github.event_name == 'push'
